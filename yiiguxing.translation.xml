<application>
  <component name="AppStorage">
    <histories>
      <item value="Transformation" />
      <item value="行为" />
      <item value="操作" />
      <item value="Option" />
      <item value="Options" />
      <item value="动作" />
      <item value="zoom" />
      <item value="Transcode" />
      <item value="import" />
      <item value="引入" />
      <item value="ave" />
      <item value="Applies a multiplier to the {@link com.bumptech.glide.request.target.Target}'s size before * loading the resource. Useful for loading thumbnails or trying to avoid loading huge resources * (particularly {@link Bitmap}s on devices with overly dense screens." />
      <item value="Parse the color string, and return the corresponding color-int. * If the string cannot be parsed, throws an IllegalArgumentException * exception. Supported formats are" />
      <item value="erase" />
      <item value="Recursive" />
      <item value="We encountered an internal error. Please try again" />
      <item value="Unable to fully decode the current frame" />
      <item value="File read status: Unable to open source" />
      <item value="The total iteration count which means repeat forever" />
      <item value="loop count if one was specified, * else -1 ({@link GifHeader#NETSCAPE_LOOP_COUNT_DOES_NOT_EXIST})." />
      <item value="This method cannot distinguish whether the loop count is 1 or doesn't exist" />
      <item value="loop count if one was specified, else 1" />
      <item value="Gets the &quot;Netscape&quot; loop count, if any. A count of 0 means repeat indefinitely." />
      <item value="Indicates that this header has no &quot;Netscape&quot; loop count." />
      <item value="Make sure sample size is a power of 2." />
      <item value="highest One Bit" />
      <item value="downsampled" />
      <item value="LZW decoder working arrays." />
      <item value="interface using file path as input" />
      <item value="Addtional" />
      <item value="PARAM" />
      <item value="INVALID" />
      <item value="No point in specially saving an old frame if we're never going to use it." />
      <item value="A header object containing the number of frames in an animated GIF image as well as basic * metadata like width and height that can be used to decode each individual frame of the GIF. Can * be shared by one or more {@link com.bumptech.glide.gifdecoder.GifDecoder}s to play the same * animated GIF in multiple views." />
      <item value="Attempts to load the resource using any registered {@link * com.bumptech.glide.load.ResourceDecoder}s that can decode the given resource class or any * subclass of the given resource class." />
      <item value="Compilation with Gradle requires the type to be specified for UnitModelLoader here." />
      <item value="Parcel File Descriptor" />
      <item value="Returns this buffer's limit." />
      <item value="Find a way to avoid this entirely or at least downsample it (either should be possible)" />
      <item value="previous" />
      <item value="Netscape" />
      <item value="advance" />
      <item value="Reads frame data from a GIF image source and decodes it into individual frames for animation * purposes. Image data can be read from either and InputStream source or a byte[]. * * &lt;p&gt;This class is optimized for running animations with the frames, there are no methods to get * individual frame images, only to decode the next frame in the animation sequence. Instead, it * lowers its memory footprint by only housing the minimum data necessary to decode the next frame * in the animation sequence. * * &lt;p&gt;The animation must be manually moved forward using {@link #advance()} before requesting the * next frame. This method must also be called before you request the first frame or an error * will occur. * * &lt;p&gt;Implementation adapted from sample code published in Lyons. (2004). &lt;em&gt;Java for * Programmers&lt;/em&gt;, republished under the MIT Open Source License" />
      <item value="Pointer" />
      <item value="Raw data read working array" />
      <item value="If we couldn't decode the GIF, we will end up with a frame count of 0." />
      <item value="Active color table. * Maximum size is 256, see GifHeaderParser.readColorTable" />
      <item value="Standard" />
      <item value="An {@link com.bumptech.glide.load.Transformation} that wraps a transformation for a {@link * Bitmap} and can apply it to every frame of any {@link * com.bumptech.glide.load.resource.gif.GifDrawable}." />
      <item value="Decodes {@link Bitmap}s from {@link GifDecoder}s representing a particular frame of a particular * GIF image." />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="301" />
        <entry key="ENGLISH" value="302" />
        <entry key="ESTONIAN" value="1" />
        <entry key="FRENCH" value="6" />
        <entry key="LATIN" value="1" />
        <entry key="PORTUGUESE" value="2" />
        <entry key="ITALIAN" value="2" />
        <entry key="INDONESIAN" value="1" />
        <entry key="VIETNAMESE" value="1" />
      </map>
    </option>
  </component>
</application>