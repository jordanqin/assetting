<application>
  <component name="AppStorage">
    <histories>
      <item value="valid values: private, public-read. The default is private." />
      <item value="Allow users to define file permissions." />
      <item value="Uin" />
      <item value="owner" />
      <item value="Account" />
      <item value="Grant read and write permissions to the authorized user" />
      <item value="Indicate absolute path of source file URL from CopySourceStruct" />
      <item value="Indicate absolute path of source file URL from CopySourceStruct. * You can specify the history version with the versionid sub-resource" />
      <item value="Copyright" />
      <item value="According to cos feature, we modify some class，comment, field name, etc." />
      <item value="Licensed under the Apache License, Version 2.0 (the &quot;License&quot;). * You may not use this file except in compliance with the License. * A copy of the License is located at * * http://aws.amazon.com/apache2.0 * * or in the &quot;license&quot; file accompanying this file. This file is distributed * on an &quot;AS IS&quot; BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either * express or implied. See the License for the specific language governing * permissions and limitations under the License. * According to cos feature, we modify some class，comment, field name, etc." />
      <item value="set cosPath for Abort Multi upload." />
      <item value="Scope" />
      <item value="Multipart" />
      <item value="Signer" />
      <item value="credential" />
      <item value="Sign the given request with the given set of credentials. Modifies the * passed-in request to apply the signature." />
      <item value="Region" />
      <item value="User Agent" />
      <item value="accelerate" />
      <item value="Client configuration options such as timeout settings, protocol string, max * retry attempts, etc." />
      <item value="Returns QCloudCredentials which the caller can use to authorize an QCloud * request. Each implementation of QCloudCredentialsProvider can chose its own * strategy for loading credentials. For example, an implementation might * load credentials from an existing key management system, or load new * credentials when credentials are rotated." />
      <item value="Credential" />
      <item value="Provider" />
      <item value="Credentials" />
      <item value="Start" />
      <item value="Forbidden" />
      <item value="blockquote" />
      <item value="Simple" />
      <item value="pull" />
      <item value="Message" />
      <item value="Client" />
      <item value="see" />
      <item value="daily" />
      <item value="Tagging" />
      <item value="校验" />
      <item value="check" />
      <item value="Room cannot verify the data integrity. Looks like you've changed schema but forgot to update the version number. You can simply fix this by increasing the version number." />
      <item value="Installation via USB is disabled." />
      <item value="does" />
      <item value="Mediator" />
      <item value="Concatenates the specified string to the end of this string." />
      <item value="concat" />
      <item value="material" />
      <item value="frozen" />
      <item value="Regions" />
      <item value="* A place for everything, and everything in its place." />
      <item value="Indicator" />
      <item value="Action" />
      <item value="dashboard" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="83" />
        <entry key="ENGLISH" value="84" />
        <entry key="FRENCH" value="3" />
        <entry key="LATIN" value="1" />
        <entry key="INDONESIAN" value="1" />
      </map>
    </option>
  </component>
</application>