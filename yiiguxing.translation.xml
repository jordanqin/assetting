<application>
  <component name="AppStorage">
    <histories>
      <item value="Make sure sample size is a power of 2." />
      <item value="highest One Bit" />
      <item value="downsampled" />
      <item value="LZW decoder working arrays." />
      <item value="interface using file path as input" />
      <item value="Addtional" />
      <item value="PARAM" />
      <item value="INVALID" />
      <item value="No point in specially saving an old frame if we're never going to use it." />
      <item value="A header object containing the number of frames in an animated GIF image as well as basic * metadata like width and height that can be used to decode each individual frame of the GIF. Can * be shared by one or more {@link com.bumptech.glide.gifdecoder.GifDecoder}s to play the same * animated GIF in multiple views." />
      <item value="Attempts to load the resource using any registered {@link * com.bumptech.glide.load.ResourceDecoder}s that can decode the given resource class or any * subclass of the given resource class." />
      <item value="Compilation with Gradle requires the type to be specified for UnitModelLoader here." />
      <item value="Parcel File Descriptor" />
      <item value="Returns this buffer's limit." />
      <item value="Find a way to avoid this entirely or at least downsample it (either should be possible)" />
      <item value="previous" />
      <item value="Netscape" />
      <item value="Indicates that this header has no &quot;Netscape&quot; loop count." />
      <item value="advance" />
      <item value="Reads frame data from a GIF image source and decodes it into individual frames for animation * purposes. Image data can be read from either and InputStream source or a byte[]. * * &lt;p&gt;This class is optimized for running animations with the frames, there are no methods to get * individual frame images, only to decode the next frame in the animation sequence. Instead, it * lowers its memory footprint by only housing the minimum data necessary to decode the next frame * in the animation sequence. * * &lt;p&gt;The animation must be manually moved forward using {@link #advance()} before requesting the * next frame. This method must also be called before you request the first frame or an error * will occur. * * &lt;p&gt;Implementation adapted from sample code published in Lyons. (2004). &lt;em&gt;Java for * Programmers&lt;/em&gt;, republished under the MIT Open Source License" />
      <item value="Pointer" />
      <item value="Raw data read working array" />
      <item value="If we couldn't decode the GIF, we will end up with a frame count of 0." />
      <item value="Active color table. * Maximum size is 256, see GifHeaderParser.readColorTable" />
      <item value="Standard" />
      <item value="An {@link com.bumptech.glide.load.Transformation} that wraps a transformation for a {@link * Bitmap} and can apply it to every frame of any {@link * com.bumptech.glide.load.resource.gif.GifDrawable}." />
      <item value="Decodes {@link Bitmap}s from {@link GifDecoder}s representing a particular frame of a particular * GIF image." />
      <item value="A no-op Transformation that simply returns the given resource." />
      <item value="that can be * applied to each frame." />
      <item value="// The drawable needs to be initialized with the correct width and height in order for a view // displaying it to end up with the right dimensions. Since our transformations may arbitrarily // modify the dimensions of our GIF, here we create a stand in for a frame and pass it to the // transformation to see what the final transformed dimensions will be so that our drawable can // report the correct intrinsic width and height." />
      <item value="abi" />
      <item value="has text relocations" />
      <item value="the tencent cloud tpg image android sdk" />
      <item value="the tencent cloud tpg image for aaa android sdk" />
      <item value="for" />
      <item value="the tencent cloud tpg image for glide android sdk" />
      <item value="用于" />
      <item value="the tencent cloud tpg image glide android sdk" />
      <item value="This resource requires authentication" />
      <item value="Unauthorized" />
      <item value="infinite" />
      <item value="bintray" />
      <item value="Sync" />
      <item value="同步" />
      <item value="Param" />
      <item value="默认" />
      <item value="No Zoom" />
      <item value="不" />
      <item value="Non" />
      <item value="轮廓" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="278" />
        <entry key="ENGLISH" value="279" />
        <entry key="ESTONIAN" value="1" />
        <entry key="FRENCH" value="6" />
        <entry key="LATIN" value="1" />
        <entry key="PORTUGUESE" value="2" />
        <entry key="ITALIAN" value="2" />
        <entry key="INDONESIAN" value="1" />
        <entry key="VIETNAMESE" value="1" />
      </map>
    </option>
  </component>
</application>