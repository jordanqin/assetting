<application>
  <component name="AppStorage">
    <option name="newTranslationDialogX" value="-1492" />
    <option name="newTranslationDialogY" value="129" />
    <histories>
      <item value="Offset this view's horizontal location by the specified amount of pixels." />
      <item value="This view determines focusability automatically. This is the default." />
      <item value="This view does not want keystrokes." />
      <item value="Sets whether this view can receive focus." />
      <item value="Set whether this view can receive focus while in touch mode. Setting this to true will also ensure that this view is focusable." />
      <item value="Denotes that the class, method or field has its visibility relaxed, so that it is more widely visible than otherwise necessary to make code testable." />
      <item value="disallow Intercept" />
      <item value="POINTER" />
      <item value="Bit mask of the parts of the action code that are the action itself." />
      <item value="Orientation" />
      <item value="Flag indicating the motion event intersected the top edge of the screen." />
      <item value="ViewDragHelper is a utility class for writing custom ViewGroups. It offers a number of useful operations and state tracking for allowing a user to drag and reposition views within their parent ViewGroup." />
      <item value="Restrict the motion of the dragged child view along the horizontal axis. The default implementation does not allow horizontal motion; the extending class must override this method and provide the desired clamping." />
      <item value="Restrict the motion of the dragged child view along the vertical axis. The default implementation does not allow vertical motion; the extending class must override this method and provide the desired clamping." />
      <item value="Display" />
      <item value="Dispaly" />
      <item value="The view if found or null otherwise." />
      <item value="Finds a view that was identified by the id attribute from the XML that was processed in {@link onCreate}." />
      <item value="Indicates whether the device is currently roaming on this network. When {@code true}, it suggests that use of data on this network may incur extra costs." />
      <item value="Returns if the currently active data network is metered. A network is classified as metered when the user is sensitive to heavy data usage on that connection due to monetary costs, data limitations or batteryperformance issues. You should check this before doing large data transfers, and warn the user or delay the operation until another network is available." />
      <item value="Indicates that connectivity on this network was successfully validated. For example, for a network with NET_CAPABILITY_INTERNET, it means that Internet connectivity was successfully detected." />
      <item value="Not Roaming" />
      <item value="Metered" />
      <item value="Validated" />
      <item value="Connected" />
      <item value="Tracker" />
      <item value="as Flow" />
      <item value="Flow" />
      <item value="Terminate" />
      <item value="coordinator" />
      <item value="Meet" />
      <item value="requirement" />
      <item value="Permit" />
      <item value="Requirement" />
      <item value="Determines if the network is not roaming." />
      <item value="Constraint" />
      <item value="Radius Ratio" />
      <item value="sweep" />
      <item value="pivot" />
      <item value="Inverse" />
      <item value="Divider" />
      <item value="if the index is out of range" />
      <item value="Gets the type at the specified index." />
      <item value="Returns whether the view hierarchy is currently undergoing a layout pass. This information is useful to avoid situations such as calling {@link requestLayout()} during a layout pass." />
      <item value="Only trigger request-during-layout logic if this is the view requesting it, not the views in its parent hierarchy" />
      <item value="Indicates whether layout was requested on this view parent." />
      <item value="true if layout was requested, false otherwise" />
      <item value="otherwise" />
      <item value="Subclasses which override this method should call the superclass method to handle possible request-during-layout errors correctly" />
      <item value="Call this when something has changed which has invalidated the layout of this view. This will schedule a layout pass of the view tree. This should not be called while the view hierarchy is currently in a layout pass ({@link isInLayout()}. If layout is happening, the request may be honored at the end of the current layout pass (and then layout will run again) or after the current frame is drawn and the next layout occurs." />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="1228" />
        <entry key="ENGLISH" value="1229" />
        <entry key="ESTONIAN" value="1" />
        <entry key="ICELANDIC" value="1" />
        <entry key="GERMAN" value="2" />
        <entry key="RUSSIAN" value="1" />
        <entry key="FRENCH" value="8" />
        <entry key="LATIN" value="1" />
        <entry key="LITHUANIAN" value="1" />
        <entry key="ROMANIAN" value="1" />
        <entry key="BENGALI" value="4" />
        <entry key="PORTUGUESE" value="2" />
        <entry key="SWEDISH" value="1" />
        <entry key="SPANISH" value="2" />
        <entry key="ITALIAN" value="2" />
        <entry key="INDONESIAN" value="1" />
        <entry key="VIETNAMESE" value="1" />
      </map>
    </option>
  </component>
  <component name="Cache">
    <option name="lastTrimTime" value="1628510394726" />
  </component>
  <component name="Settings">
    <option name="baiduTranslateSettings">
      <app-key>
        <option name="appId" value="20210205000691178" />
      </app-key>
    </option>
    <option name="googleTranslateSettings">
      <google-translate>
        <option name="useTranslateGoogleCom" value="true" />
      </google-translate>
    </option>
    <option name="translator" value="BAIDU" />
  </component>
</application>