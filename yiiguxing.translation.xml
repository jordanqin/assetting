<application>
  <component name="AppStorage">
    <histories>
      <item value="Variable" />
      <item value="Annotation" />
      <item value="enclosed" />
      <item value="generate" />
      <item value="Creator" />
      <item value="Generator" />
      <item value="clazz" />
      <item value="Inherited" />
      <item value="double Erasure" />
      <item value="DECLARED" />
      <item value="Inherit" />
      <item value="Describes the type of incremental annotation processing the annotated processor is capable of" />
      <item value="Failed to open zip file. Gradle's dependency cache may be corrupt (this sometimes occurs after a network connection timeout.)" />
      <item value="A field not described by a more specific kind (like * {@code ENUM_CONSTANT})." />
      <item value="Element" />
      <item value="* Returns the innermost element * within which this element is, loosely speaking, enclosed. * &lt;ul&gt; * &lt;li&gt; If this element is one whose declaration is lexically enclosed * immediately within the declaration of another element, that other * element is returned." />
      <item value="This class holds the information of an element that has been annotated with @Xml" />
      <item value="Generic" />
      <item value="Could not map the xml element with the tag name &lt;Owner&gt; at path '/ListAllMyBucketsResult/Owner' to java class. Have you annotated such a field in your java class to map this xml attribute? Otherwise you can turn this error message off with TikXml.Builder().exceptionOnUnreadXml(false).build()." />
      <item value="This class takes an [com.tickaroo.tikxml.processor.field.AnnotatedClass] as input" />
      <item value="Scans an [com.tickaroo.tikxml.annotation.Xml] annotated class and fulfills the [AnnotatedClass] by using [AnnotationDetector]" />
      <item value="Specify the namespace URI as an array of strings" />
      <item value="Indicates whether or not we should also scan the fields from super classes all the way up in * the inheritance three of this class." />
      <item value="ABSTRACT" />
      <item value="Enclosing" />
      <item value="Modifier" />
      <item value="Kind" />
      <item value="processing" />
      <item value="Benchmark" />
      <item value="This annotation is used to resolve polymorphism by scanning for a certain xml tag" />
      <item value="This annotation is used to map xml element attributes to java fields" />
      <item value="PERSIST" />
      <item value="n: Trust anchor for certification path not found." />
      <item value="persist" />
      <item value="Declared" />
      <item value="Generates {@link com.bumptech.glide.load.data.DataFetcher DataFetchers} from original source data * using registered {@link com.bumptech.glide.load.model.ModelLoader ModelLoaders} and the model * provided for the load. * * &lt;p&gt;Depending on the disk cache strategy, source data may first be written to disk and then loaded * from the cache file rather than returned directly." />
      <item value="It is possible that the there will be a put in between these two gets. If so that shouldn't // be a problem because we will always put the same value at the same key so our input streams // will still represent the same data." />
      <item value="A cache key for downsampled and transformed resource data + any requested signature" />
      <item value="A simple class that returns null for all gets and ignores all writes." />
      <item value="Use {@link #create(File, long)} to create a new cache with the specified arguments" />
      <item value="Get a DiskCache in the given directory and size. If a disk cache has already been created with * a different directory and/or size, it will be returned instead and the new arguments will be * ignored." />
      <item value="The default DiskCache implementation. There must be no more than one active instance for a given * directory at a time." />
      <item value="Do not extend this class" />
      <item value="A set of {@link Option Options} to apply to in memory and disk cache keys." />
      <item value="Writes retrieved data directly to the disk cache before it's decoded" />
      <item value="Saves no data to cache" />
      <item value="Indicates data was probably retrieved locally from the device, although it may have been * obtained through a content provider that may have obtained the data from a remote source." />
      <item value="Indicates data was retrieved unmodified from the on device cache" />
      <item value="Indicates data was retrieved from modified content in the on device cache" />
      <item value="Writes resources to disk after they've been decoded." />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="507" />
        <entry key="ENGLISH" value="508" />
        <entry key="ESTONIAN" value="1" />
        <entry key="ICELANDIC" value="1" />
        <entry key="RUSSIAN" value="1" />
        <entry key="FRENCH" value="7" />
        <entry key="LATIN" value="1" />
        <entry key="LITHUANIAN" value="1" />
        <entry key="PORTUGUESE" value="2" />
        <entry key="SWEDISH" value="1" />
        <entry key="ITALIAN" value="2" />
        <entry key="INDONESIAN" value="1" />
        <entry key="VIETNAMESE" value="1" />
      </map>
    </option>
  </component>
</application>